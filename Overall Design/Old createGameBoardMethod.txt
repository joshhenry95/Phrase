public static void createGameBoard(Button[][] gameBoardButtons, String[][] gameBoardLetters, TextView categoryLabel, TextView feedbackLabel) {
        int remainingRows = 4;              // Decrements when we have to move to another row (loop control)
        //int remainingSquares = 28;          // Decrements when we add a letter to the board (loop control)
        int currRowIndex = 0;               // Increments when we have to move to the next row (2D array indexing)
        int currColIndex = 0;               // Increments after we add a letter (2D array indexing)
        int remainingSquaresInCurrRow = 7;  // Decrements when we add a letter to the current row (how we know when we have to move
        //    to another row)

        // Add the phrase to the game board.
        Phrases.activePhrase = Phrases.getRandomPhrase();

        // Clear the current board if this is not the first phrase:
        if (phrasesCnt > 0) {
            for (int i = 0; i < gameBoardLetters.length; i++) {
                for (int j = 0; j < gameBoardLetters[i].length; j++) {
                    gameBoardLetters[i][j] = null;
                    gameBoardButtons[i][j].setText("");
                    gameBoardButtons[i][j].setEnabled(true);
                    gameBoardButtons[i][j].setBackgroundColor(Color.LTGRAY);
                }
            }
        }

        displayLetters(gameBoardButtons, gameBoardLetters, categoryLabel, false);
        phrasesCnt++;

        //giveFirstLetter(gameBoardButtons, gameBoardLetters, feedbackLabel);
        Utility.giveFirstLetter(gameBoardButtons, gameBoardLetters, feedbackLabel);
    }